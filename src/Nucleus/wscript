#! /usr/bin/env python
# encoding: utf-8
# :mode=python:  - For jedit

# Copyright (C) 2009 Daniel Prevost <dprevost@photonsoftware.org>
#  
# This file is free software; as a special exception the author gives
# unlimited permission to copy and/or distribute it, with or without 
# modifications, as long as this notice is preserved.
# 
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY, to the extent permitted by law; without even the
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

nucleus_list = [
        'BlockGroup.c',
        'Cursor.c',
        'Definitions.c',
        'Engine.c',
        'FastMap.c',
        'Folder.c',
        'Hash.c',
        'HashTx.c',
        'hash_fnv.c',
        'HashMap.c',
        'InitEngine.c',
        'LinkedList.c',
        'LinkNode.c',
        'MemBitmap.c',
        'MemoryAllocator.c',
        'MemoryObject.c',
        'psoErrorHandler.c',
        'Process.c',
        'ProcessManager.c',
        'Queue.c',
        'Session.c',
        'Set.c',
        'TopFolder.c',
        'Transaction.c',
        'TreeNode.c',
        'TxStatus.c' ]

def build(bld):
   nucleus_lib = bld.new_task_gen(
      features     = 'cc cstaticlib',
      source       = nucleus_list,
      includes     = '.. ../include',
      defines      = ['BUILD_PHOTON_ENGINE'],
      uselib_local = 'Common',
      target       = 'Nucleus',
      option_file  = 'options.xml',
      xml_file     = 'photon.xml',
      install_path = None
   )
   nucleus_lib_release = nucleus_lib.clone('release')

   bld.add_subdirs(['Tests'])

from TaskGen import feature, after
import Utils

@feature('cc')
@after('apply_core')
def process_parser(self):
   if not getattr(self, 'option_file', None):
      return

   if not getattr(self, 'xml_file', None):
      raise ValueError, 'xml_file parameter is missing'

   opt_node = self.path.find_resource(self.option_file)
   if not opt_node: raise ValueError, 'option file not found'

   xml_node = self.path.find_resource(self.xml_file)
   if not xml_node: raise ValueError, 'xml file not found'
   
   # the task instance
   tsk = self.create_task('parser')
   tsk.set_inputs( [opt_node, xml_node] )

   outfiles = tsk.getOptions(opt_node.nice_path())
   
   outputs = []
   for f in outfiles:
      out = self.path.find_resource(Utils.split_path(f))
      if not out: raise ValueError, f + ' file not found'
      outputs.append(out)
   
   if len(outputs) > 0:
      tsk.set_outputs( outputs )

