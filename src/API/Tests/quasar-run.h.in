/* -*- c -*- */
/* :mode=c:  - For jedit, previous line for emacs */
/*
 * Copyright (C) 2008-2009 Daniel Prevost <dprevost@photonsoftware.org>
 *
 * This file is part of Photon (photonsoftware.org).
 *
 * This file may be distributed and/or modified under the terms of the
 * GNU General Public License version 2 or version 3 as published by the 
 * Free Software Foundation and appearing in the file COPYING.GPL2 and 
 * COPYING.GPL3 included in the packaging of this software.
 *
 * Licensees holding a valid Photon Commercial license can use this file 
 * in accordance with the terms of their license.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
 */

/* --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+-- */

#ifndef PSOT_QUASAR_RUN_H
#define PSOT_QUASAR_RUN_H

/* --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+-- */

#include "Common/DirAccess.h"
#if defined(WIN32)
#  define MSG_NOSIGNAL 0
#else
#  include <sys/socket.h>
#  include <netinet/in.h>
#  include <arpa/inet.h>
#endif

#if defined (WIN32) 
#  define PSO_SOCKET SOCKET
#  define PSO_INVALID_SOCKET INVALID_SOCKET
#else
#  define PSO_SOCKET  int
#  define PSO_INVALID_SOCKET -1
#endif

#define QUASAR_DIR  @QUASAR_DIR@
#if defined WIN32
const char * quasarName = @QUASAR_DIR@ "\\quasar.exe";
#else
const char * quasarName = @QUASAR_DIR@ "/quasar";
#endif

#define QUASAR_PORT 10701

/* --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+-- */

BEGIN_C_DECLS

psocErrorHandler g_errorHandle;
pid_t g_spawnPid = 0;

#define ASSERT_END_CLEAN(TEST)                                 \
   if ( ! (TEST) ) {                                           \
      fprintf(stderr, "Failed \"clean assert\" at %d in %s\n", \
         __LINE__, __FILE__ );                                 \
   }

/* --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+-- */

bool testQuasar()
{
   int errcode = 0;
   unsigned short port;
   struct sockaddr_in addr;
#if defined (WIN32) 
   WORD versionRequested;
   WSADATA wsaData;
#endif
   PSO_SOCKET socketFD;
   bool rc = false;
   
   socketFD = PSO_INVALID_SOCKET;

   port = (unsigned short) QUASAR_PORT;

#if defined (WIN32) 
   versionRequested = MAKEWORD( 2, 2 );
 
   errcode = WSAStartup( versionRequested, &wsaData );
   assert( errcode == 0 );
#endif

   socketFD = socket( PF_INET, SOCK_STREAM, 0 );
   assert( socketFD != PSO_INVALID_SOCKET );
   
   memset( &addr, 0, sizeof(struct sockaddr_in) );
   addr.sin_family = PF_INET;
   addr.sin_port = htons( port );
   addr.sin_addr.s_addr = inet_addr( "127.0.0.1" );

   errcode = connect( socketFD, 
                      (const struct sockaddr *)&addr,
                      sizeof addr );
   if ( errcode == 0 ) {
      rc = true;

#if defined (WIN32)
      shutdown( socketFD, SD_BOTH );
      closesocket( socketFD );
#else
      shutdown( socketFD, 2 );
      close( socketFD );
#endif
   }
   
#if defined (WIN32) 
   WSACleanup ();
#endif

   return rc;
}

/* --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+-- */

bool startQuasar()
{
   pid_t pid, childPid;
   int  i, childStatus;
   bool foundError = false, ok;
   struct timeval timeOut = { 0, 5000 };

   psocInitErrorDefs();
   psocInitErrorHandler( &g_errorHandle );

   if ( testQuasar() ) return true;
   
   ok = psocRemoveDir( "/tmp/photon", &g_errorHandle );

   mkdir( "/tmp/photon", 0700 );
   system( "cp @SRC_DIR@/src/Quasar/quasar_config.example.xml /tmp/photon" );
   system( "cp @SRC_DIR@/src/Quasar/quasar_config.xsd         /tmp/photon" );
   
   /* Launch the child */
#if defined(_WIN32)
   pid = _spawnl( _P_NOWAIT, quasarName, quasarName, "-c", "/tmp/photon/quasar_config.example.xml", NULL ); 
   assert_true( pid > 0 );
   g_spawnPid = pid;
#else
   pid = fork();
   if ( pid == 0 ) {
      execl( quasarName, quasarName, "-c", "/tmp/photon/quasar_config.example.xml", NULL );
      /* If we come here, something is wrong ! */
      return false;
   }
   else if ( pid > 0 ) {
      g_spawnPid = pid;
      fprintf( stderr, "Launched child, pid = %d\n", pid );
   }
   else {
      fprintf( stderr, "Fork failure, errno = %d\n", errno );
      return false;
   }
#endif

   do {
      psocLockSleep( &timeOut );
   } while ( ! testQuasar() );

   return true;
}

/* --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+-- */

bool stopQuasar()
{
   bool ok;
   int rc;
   struct timeval timeOut = { 0, 5000 };
   
   fprintf( stderr, "pid = %d\n", g_spawnPid );
   if ( g_spawnPid == 0 ) return true;
   
   rc = kill( g_spawnPid, SIGINT );
   fprintf( stderr, "rc = %d\n", rc );
   
#if 0
      /* Now wait for the child processes to end */
   for ( i = 0; i < numChilds; ++i ) {
#if defined(_WIN32)
      _cwait( &childStatus, childPid[i], _WAIT_CHILD );
      if ( childStatus != 0 ) foundError = true;
#else
      waitpid( childPid[i], &childStatus, 0 );
      if ( WEXITSTATUS(childStatus) != 0 ) foundError = true;
#endif
   }
   assert_false( foundError );

   free( processName );
   free( childPid );
#endif
   do {
      psocLockSleep( &timeOut );
   } while ( testQuasar() );

   ok = psocRemoveDir( "/tmp/photon", &g_errorHandle );
   
   psocFiniErrorHandler( &g_errorHandle );
   psocFiniErrorDefs();
   
   return ok;
}

/* --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+-- */

END_C_DECLS

/* --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+-- */

#endif /* PSOT_QUASAR_RUN_H */

/* --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+-- */
