#! /usr/bin/env python
# encoding: utf-8
# :mode=python:  - For jedit

# Copyright (C) 2009-2010 Daniel Prevost <dprevost@photonsoftware.org>
#  
# This file is free software; as a special exception the author gives
# unlimited permission to copy and/or distribute it, with or without 
# modifications, as long as this notice is preserved.
# 
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY, to the extent permitted by law; without even the
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

quasar_list = [
        'quasarErrorHandler.c',
        'Acceptor.c',
        'ShMemConfig.c',
        'LogMsg.c',
        'MemoryManager.c',
        'qsrMain.c',
        'Quasar.c',
        'ShMemHandler.c',
        'VerifyFastMap.c',
        'VerifyFolder.c',
        'VerifyHash.c',
        'VerifyHashMap.c',
        'VerifyHashTx.c',
        'VerifyList.c',
        'VerifyMemObj.c',
        'VerifyQueue.c',
        'VerifyShMem.c']

def build(bld):
   print ' building in Quasar'
   quasar_exe = bld.new_task_gen(
      features     = 'cc cprogram',
      source       = quasar_list,
      includes     = '.. ../include',
      uselib_local = 'Common Nucleus',
      lib          = bld.env['CMOCKERY'],
      uselib       = ['LIBXML-2.0', 'WX_CORE'],
      option_file  = 'quasarOptions.xml',
      xml_file     = 'quasarErrors.xml',
      target       = 'quasar')

   quasar_exe_release = quasar_exe.clone('release')

   #bld.add_subdirs(['Tests'])

   if bld.env['DOCBOOK2X_MAN']:
      the_src_path = bld.srcnode.abspath() + '/src/Quasar'
      the_trg_path = bld.srcnode.abspath(bld.env) + '/src/Quasar'
      print 'ok1', bld.srcnode.abspath(bld.env) + '/src/Quasar'
      man_quasar = bld.new_task_gen(
         source = 'quasar.xml',
         target = 'quasar.1',
         rule   = 'cd ' + the_src_path + ' && ${DOCBOOK2X_MAN}   --encoding=iso-8859-1 quasar.xml && cp quasar.1 ' + the_trg_path,
      )
      #man_quasar_release = man_quasar.clone('release')
      the_trg_path = bld.srcnode.abspath(bld.env_of_name('release')) + '/src/Quasar'
      man_quasar_rel = bld.new_task_gen(
         source = 'quasar.xml',
         target = 'quasar.1',
         rule   = 'cd ' + the_src_path + ' && ${DOCBOOK2X_MAN}   --encoding=iso-8859-1 quasar.xml && cp quasar.1 ' + the_trg_path,
         env    = bld.env_of_name('release')
      )
      
   else:
      print 'ok2'

from TaskGen import feature, after
import Utils

@feature('cc')
@after('apply_core')
def process_parser(self):
   if not getattr(self, 'option_file', None):
      return

   if not getattr(self, 'xml_file', None):
      raise ValueError, 'xml_file parameter is missing'

   opt_node = self.path.find_resource(self.option_file)
   if not opt_node: raise ValueError, 'option file not found'

   xml_node = self.path.find_resource(self.xml_file)
   if not xml_node: raise ValueError, 'xml file not found'
   
   # the task instance
   tsk = self.create_task('parser')
   tsk.set_inputs( [opt_node, xml_node] )

   outfiles = tsk.getOptions(opt_node.nice_path())
   
   outputs = []
   for f in outfiles:
      out = self.path.find_resource(Utils.split_path(f))
      if not out: raise ValueError, f + ' file not found'
      outputs.append(out)
   
   if len(outputs) > 0:
      tsk.set_outputs( outputs )

